// app/api/images/upload/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { uploadImageToS3, BUCKET_NAME, BUCKET_REGION } from '@/lib/s3-config'

type Uploaded = {
  key: string
  url: string
  size?: number
  contentType?: string
}

function extFromName(name: string) {
  const raw = name.split('.').pop() || ''
  const clean = raw.toLowerCase().split('?')[0].split('#')[0]
  return clean || 'jpg'
}

function safeBaseName(name: string) {
  return name
    .replace(/\.[^/.?#]+(?=$|[?#])/i, '')
    .replace(/[^a-z0-9_-]+/gi, '-')
    .replace(/-+/g, '-')
    .replace(/^[-.]+|[-.]+$/g, '')
    .toLowerCase() || 'img'
}

const MAX_FILE_SIZE = 10 * 1024 * 1024 // 10 MB
const ALLOWED_TYPES = new Set([
  'image/jpeg',
  'image/jpg',
  'image/png',
  'image/webp',
])

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    const form = await request.formData()
    const carIdRaw = String(form.get('carId') ?? 'new').trim()
    const batchIdRaw = String(form.get('batchId') ?? '').trim()
    const batchId = batchIdRaw || `b_${Date.now()}`
    const files = form.getAll('images').filter(Boolean) as File[]
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:', { 
      carIdRaw, 
      batchIdRaw, 
      batchId, 
      filesCount: files.length,
      fileNames: files.map(f => f.name)
    })

    if (!files.length) {
      return NextResponse.json({ 
        success: false, 
        error: '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' 
      }, { status: 400 })
    }

    // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–∞–ø–∫–∏ –≤ S3 - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–∞–ø–∫—É
    const prefix = `cars/${carIdRaw}/`
    
    console.log('üìÅ –ü—Ä–µ—Ñ–∏–∫—Å –∑–∞–≥—Ä—É–∑–∫–∏:', prefix)

    const uploaded: Uploaded[] = []

    for (const file of files) {
      console.log('üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', file.name, '–†–∞–∑–º–µ—Ä:', file.size, '–¢–∏–ø:', file.type)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª (–≤ Node.js –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ File)
      if (!file || typeof file !== 'object' || !('name' in file) || !('size' in file) || !('type' in file)) {
        console.log('‚ö†Ô∏è –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
        continue
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
      if (file.size > MAX_FILE_SIZE) {
        console.log('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.name, file.size)
        return NextResponse.json({ 
          success: false, 
          error: `–§–∞–π–ª ${file.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${MAX_FILE_SIZE / 1024 / 1024}MB` 
        }, { status: 413 })
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
      const ctype = file.type || 'application/octet-stream'
      if (!ALLOWED_TYPES.has(ctype)) {
        console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', ctype)
        return NextResponse.json({ 
          success: false, 
          error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${ctype}` 
        }, { status: 415 })
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const ext = extFromName(file.name)
      const base = safeBaseName(file.name)
      const fname = `${base}_${Date.now()}_${Math.random().toString(36).slice(2,8)}.${ext}`
      const key = `${prefix}${fname}`
      
      console.log('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á:', key)

      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä
        const arrayBuf = await file.arrayBuffer()
        const buf = Buffer.from(arrayBuf)
        console.log('üì¶ –§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä, —Ä–∞–∑–º–µ—Ä:', buf.length)

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3
        console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3...')
        const res = await uploadImageToS3(buf, key, ctype)
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3:', res)
        
        if (!res.success) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', res.error)
          throw new Error(res.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        console.log('üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è:', key)
        const imageUrl = `https://${BUCKET_NAME}.s3.${BUCKET_REGION}.amazonaws.com/${key}`
        
        const uploadResult = {
          key: res.key ?? key,
          url: imageUrl,
          size: file.size,
          contentType: ctype,
        }
        uploaded.push(uploadResult)
        console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–∞—Å—Å–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö:', uploadResult)
        
      } catch (uploadError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', file.name, uploadError)
        throw uploadError
      }
    }

    console.log('üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
      uploadedCount: uploaded.length,
      uploadedImages: uploaded.map(u => ({ key: u.key, url: u.url }))
    })
    
    return NextResponse.json({
      success: true,
      batchId,
      images: uploaded,
    })
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err)
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 })
  }
}
