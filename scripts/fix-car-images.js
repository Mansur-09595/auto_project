// scripts/fix-car-images.js
const https = require('https');
const http = require('http');

function makeRequest(url, options, data) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: options.headers || {}
    };

    const req = client.request(requestOptions, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          statusText: res.statusMessage,
          headers: res.headers,
          body: body
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(data);
    }
    
    req.end();
  });
}

async function fixCarImages() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è...');
    
    const carId = 'cmeagzy6x0001ujisgylepk0c';
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è...');
    const carResponse = await makeRequest(`http://localhost:3001/api/cars/${carId}`, {
      method: 'GET'
    });
    
    if (carResponse.status !== 200) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
      return;
    }
    
    const carData = JSON.parse(carResponse.body);
    console.log('üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å:', carData.brand, carData.model);
    
    // 2. –ü–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let images = [];
    try {
      images = typeof carData.photos === 'string' ? JSON.parse(carData.photos) : carData.photos;
      console.log('üì∏ –¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', images);
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', carData.photos);
      return;
    }
    
    // 3. –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const tempImages = images.filter(img => img.includes('/temp_'));
    console.log('üîÑ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞:', tempImages);
    
    if (tempImages.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞');
      return;
    }
    
    // 4. –ö–æ–º–º–∏—Ç–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('üîÑ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const commitResponse = await makeRequest('http://localhost:3001/api/images/commit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    }, JSON.stringify({ 
      carId: carId, 
      images: tempImages 
    }));
    
    console.log('üì• –û—Ç–≤–µ—Ç –∫–æ–º–º–∏—Ç–∞:', commitResponse.status, commitResponse.statusText);
    console.log('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–æ–º–º–∏—Ç–∞:', commitResponse.body);
    
    if (commitResponse.status !== 200) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      return;
    }
    
    const commitData = JSON.parse(commitResponse.body);
    if (!commitData.success) {
      console.log('‚ùå –ö–æ–º–º–∏—Ç –Ω–µ —É–¥–∞–ª—Å—è:', commitData.error);
      return;
    }
    
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–æ–º–º–∏—á–µ–Ω—ã!');
    console.log('üñºÔ∏è –ù–æ–≤—ã–µ URL:', commitData.images);
    
    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ URL –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
    const permanentImages = images.map(img => {
      if (img.includes('/temp_')) {
        const tempKey = img.split('/').pop()?.split('?')[0];
        const permanentImg = commitData.images.find((permImg) => permImg.includes(tempKey || '')) || img;
        console.log('üîÑ –ó–∞–º–µ–Ω—è–µ–º:', img, '–Ω–∞:', permanentImg);
        return permanentImg;
      }
      return img;
    });
    
    console.log('üñºÔ∏è –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', permanentImages);
    
    const updateResponse = await makeRequest(`http://localhost:3001/api/cars/${carId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      }
    }, JSON.stringify({ photos: permanentImages }));
    
    console.log('üì• –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateResponse.status, updateResponse.statusText);
    
    if (updateResponse.status === 200) {
      console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      const updateData = JSON.parse(updateResponse.body);
      console.log('üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', updateData.car.photos);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateResponse.body);
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixCarImages();
